% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consensus_combine.R, R/consensus_compare.R
\name{consensus_combine}
\alias{consensus_combine}
\alias{consensus_compare}
\title{Combine and compare consensus results}
\usage{
consensus_combine(..., res.CCP, k, element = c("matrix", "class"),
  alg.names = NULL)

consensus_compare(data, cl.mat, cons.mat, alg.names = NULL)
}
\arguments{
\item{...}{any number of objects outputted from
\code{\link{consensus_summary}}}

\item{res.CCP}{an object outputted from \code{\link{ConClustPlus}}}

\item{k}{desired number of clusters}

\item{element}{either "matrix" or "class" to extract the consensus matrix or
consensus class, respectively.}

\item{alg.names}{optional. Supply a vector of names for the algorithms.}

\item{data}{data matrix with samples as rows, genes as columns}

\item{cl.mat}{matrix of cluster assignments. Each row is an assignment for a
different algorithm. Use \code{element = "class"} in
\code{consensus_combine}.}

\item{cons.mat}{A list of consensus matrices, one for each algorithm. Use
\code{element = "class"} in \code{consensus_combine}.}
}
\value{
\code{consensus_combine} returns either a list of all consensus
  matrices or a data frame showing all the consensus classes

\code{consensus_compare} returns a data frame of the indices PAC and
  CHI in each column for each algorithm.
}
\description{
Combine results from ConClust and ConClustPlus and output either the
consensus matrices or consensus classes for all algorithms from both objects.
Then compare algorithms using validation indices PAC and CHI.

Compute PAC and CHI for a set of algorithms.
}
\examples{
# Consensus clustering for multiple algorithms
set.seed(911)
x <- matrix(rnorm(1000), nrow = 10)
CC1 <- ConClust(x, k = 4, reps = 10, method = "apEucl", save = FALSE)
CC2 <- ConClust(x, k = 4, reps = 10, method = "gmmBIC", save = FALSE)
CCP <- ConClustPlus(x, k = 4, reps = 10, save = FALSE)

# Get summary for ConClust
CC1.summ <- consensus_summary(CC1, k = 4)
CC2.summ <- consensus_summary(CC2, k = 4)

# Combine with CCP and return either matrices or classes
y1 <- consensus_combine(CC1.summ, CC2.summ, res.CCP = CCP, k = 4,
element = "matrix")
str(y1)
y2 <- consensus_combine(CC1.summ, CC2.summ, res.CCP = CCP, k = 4,
element = "class")
str(y2)

# Compare algorithms on PAC and CHI
consensus_compare(x, y1, y2)
}
\author{
Derek Chiu
}

